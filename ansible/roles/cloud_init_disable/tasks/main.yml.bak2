---
# roles/cloud_init_disable/tasks/main.yml

# Controller-side hygiene (handle host key churn)
- name: Ensure ~/.ssh exists on controller
  delegate_to: localhost
  file:
    path: "{{ lookup('env','HOME') }}/.ssh"
    state: directory
    mode: "0700"

- name: Remove old known_hosts entry for the VM (controller)
  delegate_to: localhost
  ansible.builtin.known_hosts:
    name: "{{ static_ip }}"
    state: absent

# Ensure ~/.ssh exists on controller
- name: Ensure ~/.ssh exists on controller
  delegate_to: localhost
  ansible.builtin.file:
    path: "{{ lookup('env','HOME') }}/.ssh"
    state: directory
    mode: "0700"

# Remove any stale key first (keeps things clean when VM is rebuilt)
- name: Remove old known_hosts entry for the VM (controller)
  delegate_to: localhost
  ansible.builtin.known_hosts:
    path: "{{ lookup('env','HOME') }}/.ssh/known_hosts"
    name: "{{ static_ip }}"
    state: absent

# Scan current host key (no shell redirection)
- name: Scan current host key (controller)
  delegate_to: localhost
  ansible.builtin.command: ssh-keyscan -T 5 -H {{ static_ip }}
  register: _scan
  changed_when: false

# Add the scanned key idempotently
- name: Add host key to known_hosts (controller)
  delegate_to: localhost
  ansible.builtin.known_hosts:
    path: "{{ lookup('env','HOME') }}/.ssh/known_hosts"
    name: "{{ static_ip }}"
    key: "{{ _scan.stdout }}"

- name: Wait for SSH availability before network changes (controller)
  delegate_to: localhost
  wait_for:
    host: "{{ static_ip }}"
    port: 22
    timeout: 180

# Remote pre-reqs
- name: Ensure cloud-init cfg dir exists
  become: yes
  file:
    path: /etc/cloud/cloud.cfg.d
    state: directory
    mode: "0755"

- name: Gather minimal network facts
  ansible.builtin.setup:
    gather_subset:
      - network

# Determine NIC name: prefer provided nic_name, else the default IPv4 interface, else eth0
- name: Derive NIC name
  set_fact:
    _nic_name: "{{ nic_name | default(ansible_default_ipv4.interface | default('eth0')) }}"

# Determine MAC: prefer provided primary_mac, else MAC of _nic_name if facts have it; else empty
- name: Derive NIC MAC
  set_fact:
    _primary_mac: >-
      {{ primary_mac
         | default( (hostvars[inventory_hostname]['ansible_' + _nic_name].macaddress
                     if ('ansible_' + _nic_name) in hostvars[inventory_hostname] else '') ) }}

# Nameservers default
- name: Derive nameservers with safe defaults
  set_fact:
    _nameservers: "{{ nameservers | default(['192.168.1.1','8.8.8.8','8.8.4.4']) }}"

# Defaults/derivations
- name: Derive network variables with safe defaults
  set_fact:
    _nic_name: "{{ nic_name | default('eth0') }}"
    _nameservers: "{{ nameservers | default(['192.168.1.1','8.8.8.8','8.8.4.4']) }}"
    _primary_mac: "{{ primary_mac }}"

# -----------------------------
# Phase 1: Candidate netplan
# -----------------------------
# NOTE: This is STATIC configuration. If you want DHCP instead:
#   - set dhcp4: true
#   - remove addresses:, routes:, nameservers:
#- name: Write candidate netplan (high priority)
#  become: yes
#  copy:
#    dest: /etc/netplan/99-override.yaml
#    mode: "0644"
#    content: |
#      network:
#        version: 2
#        renderer: networkd
#        ethernets:
#          {{ _nic_name }}:
#            match:
#              macaddress: "{{ _primary_mac }}"
#              # If your VM NIC isn't virtio, remove the driver line below to avoid mismatch:
#              driver: virtio_net
#            set-name: {{ _nic_name }}
#            dhcp4: false
#            dhcp6: false
#            addresses:
#              - "{{ static_ip }}/24"
#            routes:
#              - to: default
#                via: "{{ gateway }}"
#            nameservers:
#              addresses: {{ _nameservers }}
- name: Write candidate netplan (high priority)
  become: yes
  copy:
    dest: /etc/netplan/99-override.yaml
    mode: "0644"
    content: |
      network:
        version: 2
        renderer: networkd
        ethernets:
          {{ _nic_name }}:
            {% if _primary_mac %}
            match:
              macaddress: "{{ _primary_mac }}"
            set-name: {{ _nic_name }}
            {% endif %}
            dhcp4: false
            dhcp6: false
            addresses:
              - "{{ static_ip }}/24"
            routes:
              - to: default
                via: "{{ gateway }}"
            nameservers:
              addresses: {{ _nameservers }}

- name: Apply candidate netplan
  become: yes
  command: netplan apply

# -----------------------------
# Disable cloud-init networking
# -----------------------------
- name: Touch cloud-init.disabled (belt & suspenders)
  become: yes
  file:
    path: /etc/cloud/cloud-init.disabled
    state: touch
    mode: "0644"

- name: Disable Cloud-Init networking
  become: yes
  copy:
    dest: /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg
    mode: "0644"
    content: "network: {config: disabled}\n"

- name: Stop & mask Cloud-Init services (tolerant)
  become: yes
  block:
    - name: Stop and mask cloud-init units
      systemd:
        name: "{{ item }}"
        state: stopped
        enabled: no
        masked: yes
      loop:
        - cloud-init
        - cloud-init-local
        - cloud-final
        - cloud-config
      failed_when: false
  rescue:
    - debug:
        msg: "cloud-init units not found or already disabled; continuing."

- name: Remove cloud-init netplan if present
  become: yes
  file:
    path: /etc/netplan/50-cloud-init.yaml
    state: absent

# -----------------------------
# Phase 2: Finalize netplan
# -----------------------------
- name: Write final netplan (canonical name)
  become: yes
  copy:
    dest: /etc/netplan/01-netcfg.yaml
    mode: "0644"
    content: |
      network:
        version: 2
        renderer: networkd
        ethernets:
          {{ _nic_name }}:
            match:
              macaddress: "{{ _primary_mac }}"
              # Remove the driver line if your NIC is not virtio:
              driver: virtio_net
            set-name: {{ _nic_name }}
            dhcp4: false
            dhcp6: false
            addresses:
              - "{{ static_ip }}/24"
            routes:
              - to: default
                via: "{{ gateway }}"
            nameservers:
              addresses: {{ _nameservers }}

- name: Remove candidate netplan
  become: yes
  file:
    path: /etc/netplan/99-override.yaml
    state: absent

- name: Apply final netplan
  become: yes
  command: netplan apply

# -----------------------------
# Post checks
# -----------------------------
- name: Wait for SSH after network change (controller)
  delegate_to: localhost
  wait_for:
    host: "{{ static_ip }}"
    port: 22
    delay: 3
    timeout: 180

